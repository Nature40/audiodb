// gradle version 7.0.2, in eclipse gradle version 7.0.1 

plugins { 
  id "com.github.ben-manes.versions" version "0.39.0" // update check task: dependencyUpdates  https://github.com/ben-manes/gradle-versions-plugin
}

/*
check for updates:
gradle dependencyUpdates
or
./gradlew dependencyUpdates
*/

/*
list (transitive) dependencies
gradle dependencies
or
./gradlew dependencies
*/

// upgrade gradle wrapper
//./gradlew wrapper --gradle-version=7.0.2

def isNonStable = { String version ->
  return version.contains('alpha') || version.contains('beta') 
}

dependencyUpdates {
  rejectVersionIf {  // reject all non stable versions
    isNonStable(it.candidate.version)
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'

compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    
    maven { // needed for compile group: 'com.github.aelstad', name: 'keccakj', version: '1.1.0'
      url 'https://repository.mulesoft.org/nexus/content/repositories/public'
    }
}

dependencies {
  	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
  	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
  	implementation group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.14.1'
  	implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j18-impl', version: '2.14.1'
  	implementation group: 'com.lmax', name: 'disruptor', version: '3.4.4'
  	
	implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '11.0.4'
	implementation group: 'org.eclipse.jetty', name: 'jetty-security', version: '11.0.4'
	implementation group: 'org.eclipse.jetty.http2', name: 'http2-server', version: '11.0.4'
	implementation group: 'org.eclipse.jetty', name: 'jetty-alpn-java-server', version: '11.0.4'
	implementation group: 'org.eclipse.jetty', name: 'jetty-alpn-conscrypt-server', version: '11.0.4' // ALPN support for Java 8
	
	implementation group: 'org.json', name: 'json', version: '20210307'
	implementation group: 'org.yaml', name: 'snakeyaml', version: '1.29'
	implementation group: 'com.opencsv', name: 'opencsv', version: '5.4'
	implementation group: 'de.siegmar', name: 'fastcsv', version: '2.0.0'
	
	implementation group: 'com.github.wendykierp', name: 'JTransforms', version: '3.1'
	
	implementation group: 'com.samskivert', name: 'jmustache', version: '1.15'

	implementation group: 'com.github.aelstad', name: 'keccakj', version: '1.1.0'		
	
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
	
	implementation group: 'com.webauthn4j', name: 'webauthn4j-core', version: '0.16.1.RELEASE'
	
	implementation group: 'ar.com.hjg', name: 'pngj', version: '2.1.0'	
	implementation group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'
	
	implementation group: 'com.drewnoakes', name: 'metadata-extractor', version: '2.16.0'
	
	implementation group: 'com.h2database', name: 'h2', version: '1.4.200'	
}

sourceSets.main.java.srcDir 'src'

jar {
	from file('src/log4j2.xml')
	destinationDirectory = project.layout.projectDirectory.dir('package')
	
	manifest {
		String classPathFiles = "";
		for(java.io.File file : files(configurations.runtimeClasspath)) {
			classPathFiles += "lib/"+file.getName()+" "; 
		}
		//println("the class path: "+classPathFiles);	
	
        attributes 	'Built-Date': new Date(),
					'Built-JDK': System.getProperty('java.version'),
					'Main-Class': 'run.Terminal',
					'Class-Path': classPathFiles
    }
}

compileJava   {
  sourceCompatibility = 11
  targetCompatibility = 11
}

tasks.withType(JavaCompile){
    //options.deprecation = true
	//options.listFiles = true
	//options.verbose = true
}

task clean_package(type: Delete) {
  delete 'package'
}

task copy_lib(type: Copy) {
	from files(configurations.runtimeClasspath)
    into 'package/lib'
}

task copy_add(type: Copy) {
	from fileTree('add')
	into 'package'
}

task copy_webcontent(type: Copy) {
	from fileTree('webcontent')
	into 'package/webcontent'
}

task copy_mustache(type: Copy) {
	from fileTree('mustache')
	into 'package/mustache'
}

task copy_build(type: Copy, dependsOn: [jar]) {
	from fileTree('build/libs')
	into 'package'
}

task _package(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_mustache, copy_add ]) {
	group = 'project' 
}