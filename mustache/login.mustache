<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="utf-8" />
<meta name="robots" content="noindex, nofollow" />
<meta name="referrer" content="same-origin" />
<script>
{{>sha3.min.js}}
function getNonce(len) {
	var rnd = new Uint32Array(len);
	window.crypto.getRandomValues(rnd);
	var nonce = "";
	var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	var charsLen = chars.length;
	for(var i = 0; i < len; i++) {
		nonce += chars[rnd[i] % charsLen];
	}
	return nonce;
}
var salt = '{{salt}}';
var server_nonce = '{{server_nonce}}';
var client_nonce = getNonce(8);
function hash(user, password) {
	var h = sha3_512(salt + user + salt + password + salt);
	return sha3_512(server_nonce + client_nonce + h + client_nonce + server_nonce);
}
function login() {
	var u = document.getElementById('user').value;
	var p = document.getElementById('password').value;
	var h = hash(u, p);
	window.location.href = "/login?server_nonce=" + server_nonce + "&client_nonce=" + client_nonce +"&hash=" + h;
}
document.onkeydown = function (e) {
	if(e.code === 'Enter') {
		login();
	}
}
function arrayBufferToBase64(arrayBuffer) {
  let byteBuffer = new Uint8Array(arrayBuffer);
  let text = String.fromCharCode.apply(null, byteBuffer);
  let base64 = btoa(text);
  return(base64)
}
function base64ToUint8Array(base64) {
    var binary = window.atob(base64);
    var len = binary.length;
    var bytes = new Uint8Array(len);
    for (var i = 0; i < len; i++) {
        bytes[i] = binary.charCodeAt(i);
    }
    return bytes;
}
async function authenticate_WebAuthn() {	
	try {
		console.log("start");
		var challengeResponse = await fetch('/loginWebAuthn', {
				method: 'GET',
				headers: {
					'Accept': 'application/json',
				},
		});
		var challengeResponseJson = await challengeResponse.json();
		var challengeText = challengeResponseJson.challenge;
		var challenge = base64ToUint8Array(challengeText);
		console.log("next");
		console.log(challengeResponse);
		console.log("next1");
		console.log(challengeText);
		console.log();
		console.log("next2");
		var rpId = window.location.hostname;
		var publicKey = {
			//challenge: new Uint8Array(26),
			challenge: challenge,
			rpId: rpId,
		};	
	
		var credentialInfo = await navigator.credentials.get({ publicKey });
		console.log(credentialInfo);
		var authenticatorAssertionResponse = credentialInfo.response;
		console.log(authenticatorAssertionResponse);
		var request = {};
		request.credentialId = arrayBufferToBase64(credentialInfo.rawId);
		request.authenticatorData = arrayBufferToBase64(authenticatorAssertionResponse.authenticatorData);
		request.signature = arrayBufferToBase64(authenticatorAssertionResponse.signature);
		request.clientDataJSON = arrayBufferToBase64(authenticatorAssertionResponse.clientDataJSON);
		request.userHandle = arrayBufferToBase64(authenticatorAssertionResponse.userHandle);
		request.rpId = rpId;
		console.log(request);
		var response = await fetch('/loginWebAuthn', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',	
				'Accept': 'application/json',
			},
			body: JSON.stringify(request),
		});
		console.log(response);
		location.reload();
	} catch(err) {
		alert(err);
	}
}
</script>

<style>

body {
	background-color: #eae7e0; 
	font-family: Roboto,-apple-system,Helvetica Neue,Helvetica,Arial,sans-serif;	
	padding-top: 0px; 
	padding-bottom: 10px;
	padding-left: 50px;
	padding-right: 50px;
	color: #0000009c;
}

h1 {
  text-align: center;
  color: #00000085;
}

</style>

</head>

<body>
<h1>Authentication required</h1>
<hr>
<h2>Local Login</h2>

user name:<br>
<input type="text" name="user name" value="" id="user">
<br>
password:<br>
<input type="password" name="password" value="" id="password">
<br><br>

<button onclick="login()">
	<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" viewBox="0 0 24 24" fill="black" width="24px" height="24px"><g><rect fill="none" height="24" width="24"/></g><g><path d="M11,7L9.6,8.4l2.6,2.6H2v2h10.2l-2.6,2.6L11,17l5-5L11,7z M20,19h-8v2h8c1.1,0,2-0.9,2-2V5c0-1.1-0.9-2-2-2h-8v2h8V19z"/></g></svg>
	<b>Login</b>
</button>
<i>User name and password will not be send in plaintext.</i>
<br>
<br>
<hr>
<h2>FIDO2 (WebAuthn, CTAP2)</h2>
<i>Login with a hardware authentication device without username or password.</i>
<br>
<i>To use this procedure, you first need to login with another method and register your device in your user profile.</i>
<br>
<i>It has been tested with <b>YubiKey 5 NFC</b> over USB at Windows 10 with Mozilla Firefox and Google Chrome.</i>
<br>
<br>
<button onclick="authenticate_WebAuthn()">
	<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black" width="24px" height="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M17.81 4.47c-.08 0-.16-.02-.23-.06C15.66 3.42 14 3 12.01 3c-1.98 0-3.86.47-5.57 1.41-.24.13-.54.04-.68-.2-.13-.24-.04-.55.2-.68C7.82 2.52 9.86 2 12.01 2c2.13 0 3.99.47 6.03 1.52.25.13.34.43.21.67-.09.18-.26.28-.44.28zM3.5 9.72c-.1 0-.2-.03-.29-.09-.23-.16-.28-.47-.12-.7.99-1.4 2.25-2.5 3.75-3.27C9.98 4.04 14 4.03 17.15 5.65c1.5.77 2.76 1.86 3.75 3.25.16.22.11.54-.12.7-.23.16-.54.11-.7-.12-.9-1.26-2.04-2.25-3.39-2.94-2.87-1.47-6.54-1.47-9.4.01-1.36.7-2.5 1.7-3.4 2.96-.08.14-.23.21-.39.21zm6.25 12.07c-.13 0-.26-.05-.35-.15-.87-.87-1.34-1.43-2.01-2.64-.69-1.23-1.05-2.73-1.05-4.34 0-2.97 2.54-5.39 5.66-5.39s5.66 2.42 5.66 5.39c0 .28-.22.5-.5.5s-.5-.22-.5-.5c0-2.42-2.09-4.39-4.66-4.39-2.57 0-4.66 1.97-4.66 4.39 0 1.44.32 2.77.93 3.85.64 1.15 1.08 1.64 1.85 2.42.19.2.19.51 0 .71-.11.1-.24.15-.37.15zm7.17-1.85c-1.19 0-2.24-.3-3.1-.89-1.49-1.01-2.38-2.65-2.38-4.39 0-.28.22-.5.5-.5s.5.22.5.5c0 1.41.72 2.74 1.94 3.56.71.48 1.54.71 2.54.71.24 0 .64-.03 1.04-.1.27-.05.53.13.58.41.05.27-.13.53-.41.58-.57.11-1.07.12-1.21.12zM14.91 22c-.04 0-.09-.01-.13-.02-1.59-.44-2.63-1.03-3.72-2.1-1.4-1.39-2.17-3.24-2.17-5.22 0-1.62 1.38-2.94 3.08-2.94 1.7 0 3.08 1.32 3.08 2.94 0 1.07.93 1.94 2.08 1.94s2.08-.87 2.08-1.94c0-3.77-3.25-6.83-7.25-6.83-2.84 0-5.44 1.58-6.61 4.03-.39.81-.59 1.76-.59 2.8 0 .78.07 2.01.67 3.61.1.26-.03.55-.29.64-.26.1-.55-.04-.64-.29-.49-1.31-.73-2.61-.73-3.96 0-1.2.23-2.29.68-3.24 1.33-2.79 4.28-4.6 7.51-4.6 4.55 0 8.25 3.51 8.25 7.83 0 1.62-1.38 2.94-3.08 2.94s-3.08-1.32-3.08-2.94c0-1.07-.93-1.94-2.08-1.94s-2.08.87-2.08 1.94c0 1.71.66 3.31 1.87 4.51.95.94 1.86 1.46 3.27 1.85.27.07.42.35.35.61-.05.23-.26.38-.47.38z"/></svg>
	<b>Authenticate</b>
</button>

{{#jws_section}}
<br>
<br>
<hr>
<h2>Login by third party (Single sign-on)</h2>

<table>
{{#jws}}
  <tr>
    <td>
	  <a href="{{{redirect_target}}}">{{{link_text}}}</a>
    </td>
	<td style="width: 20px;">
    </td>
    <td>
	  {{{link_description}}}
    </td>
  </tr>
{{/jws}}
</table>
{{/jws_section}}

<br>
<br>
<br>
<hr>
<i>By login action you agree to store identifying cookies in your browser.</i>
		
</body>
</html>