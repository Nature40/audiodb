<!DOCTYPE html>
<html lang="en">

<head>
<meta charset="utf-8" />
<meta name="robots" content="noindex, nofollow" />
<meta name="referrer" content="same-origin" />
<script>
{{>sha3.min.js}}
function getNonce(len) {
	var rnd = new Uint32Array(len);
	window.crypto.getRandomValues(rnd);
	var nonce = "";
	var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	var charsLen = chars.length;
	for(var i = 0; i < len; i++) {
		nonce += chars[rnd[i] % charsLen];
	}
	return nonce;
}
var salt = '{{salt}}';
var server_nonce = '{{server_nonce}}';
var client_nonce = getNonce(8);
function hash(user, password) {
	var h = sha3_512(salt + user + salt + password + salt);
	return sha3_512(server_nonce + client_nonce + h + client_nonce + server_nonce);
}
function login() {
	var u = document.getElementById('user').value;
	var p = document.getElementById('password').value;
	var h = hash(u, p);
	window.location.href = "/login?server_nonce=" + server_nonce + "&client_nonce=" + client_nonce +"&hash=" + h;
}
document.onkeydown = function (e) {
	if(e.code === 'Enter') {
		login();
	}
}
function arrayBufferToBase64(arrayBuffer) {
  let byteBuffer = new Uint8Array(arrayBuffer);
  let text = String.fromCharCode.apply(null, byteBuffer);
  let base64 = btoa(text);
  return(base64)
}
async function authenticate_WebAuthn() {
	var rpId = window.location.hostname;
	var publicKey = {
		challenge: new Uint8Array(26),
		rpId: rpId,
	};
	try {
		var credentialInfo = await navigator.credentials.get({ publicKey });
		console.log(credentialInfo);
		var authenticatorAssertionResponse = credentialInfo.response;
		console.log(authenticatorAssertionResponse);
		var request = {};
		request.credentialId = arrayBufferToBase64(credentialInfo.rawId);
		request.authenticatorData = arrayBufferToBase64(authenticatorAssertionResponse.authenticatorData);
		request.signature = arrayBufferToBase64(authenticatorAssertionResponse.signature);
		request.clientDataJSON = arrayBufferToBase64(authenticatorAssertionResponse.clientDataJSON);
		request.userHandle = arrayBufferToBase64(authenticatorAssertionResponse.userHandle);
		request.rpId = rpId;
		console.log(request);
		var response = await fetch('/loginWebAuthn', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',	
				'Accept': 'application/json',
			},
			body: JSON.stringify(request),
		});
		console.log(response);
		location.reload();
	} catch(err) {
		alert(err);
	}
}
</script>
</head>

<body>
<hr>
<h2>Local Login</h2>

user name:<br>
<input type="text" name="user name" value="" id="user">
<br>
password:<br>
<input type="password" name="password" value="" id="password">
<br><br>

<button onclick="login()">login</button>
<i>User name and password will not be send in plaintext.</i>
<br>
<br>
<hr>
<h2>FIDO2 (WebAuthn, CTAP2)</h2>
<i>Login with a hardware authentication device without username or password.</i>
<br>
<i>To use this this procedure you first need to login with another method and register your device in your user profile.</i>
<br>
<i>It has been tested with <b>YubiKey 5 NFC</b> over USB at Windows 10 with Mozilla Firefox and Google Chrome.</i>
<br>
<br>
<button onclick="authenticate_WebAuthn()">authenticate</button>
<br>
<br>
<hr>
<h2>Login by third party (Single sign-on)</h2>

<table>
{{#jws}}
  <tr>
    <td>
	  <a href="{{{redirect_target}}}">{{{link_text}}}</a>
    </td>
	<td style="width: 20px;">
    </td>
    <td>
	  {{{link_description}}}
    </td>
  </tr>
{{/jws}}
</table>

<br>
<br>
<br>
<hr>
<i>By login action you agree to store identifiing cookies in your browser.</i>
		
</body>
</html>